{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qframe=tb, language=C++, aboveskip=3mm, belowskip=3mm, showstringspaces=false, columns=flexible, basicstyle=, numbers=none, numberstyle=, keywordstyle=, commentstyle=, stringstyle=, breaklines=true, breakatwhitespace=true, tabsize=3\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_CA","sentence":"^\\Qframe=tb, language=C++, aboveskip=3mm, belowskip=3mm, showstringspaces=false, columns=flexible, basicstyle=, numbers=none, numberstyle=, keywordstyle=, commentstyle=, stringstyle=, breaklines=true, breakatwhitespace=true, tabsize=3\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_CA","sentence":"^\\Qframe = tb, language = C++, aboveskip = 3mm, belowskip = 3mm, showstringspaces = false, columns=flexible, basicstyle = , numbers = none, numberstyle = , keywordstyle = , commentstyle = , stringstyle = , breaklines = true, breakatwhitespace = true, tabsize = 3\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\Qframe = tb, language = C++, aboveskip = 3mm, belowskip = 3mm, showstringspaces = false, columns=flexible, basicstyle = , numbers = none, numberstyle = , keywordstyle = , commentstyle = , stringstyle = , breaklines = true, breakatwhitespace = true, tabsize = 3\\E$"}
{"rule":"UNIT_SPACE","sentence":"^\\Qframe = tb, language = C++, aboveskip = 3mm, belowskip = 3mm, showstringspaces = false, columns=flexible, basicstyle = , numbers = none, numberstyle = , keywordstyle = , commentstyle = , stringstyle = , breaklines = true, breakatwhitespace = true, tabsize = 3\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qdkgreen rgb 0,0.6,0 gray rgb 0.5,0.5,0.5 mauve rgb 0.58,0,0.82\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qdkgreen RGB 0,0.6,0 grey RGB 0.5,0.5,0.5 mauve RGB 0.58,0,0.82\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qdkgreen rgb 0,0.6,0 grey rgb 0.5,0.5,0.5 mauve rgb 0.58,0,0.82\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_CA","sentence":"^\\Qsecnumdepth 0 If Else Then Else Bridgeable Locality By: Anthony Sasso\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_CA","sentence":"^\\QI think that this is an issue due to the variables local to the initial if-else now needing to become (albeit still localized), higher in view and defined before in a parent functionIntroClarificationNote blue which may not be wanted & can cause issues as shown in the listed examples.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_CA","sentence":"^\\QThe initial “if” must have a CASE macro if one or more others doInitalProblemNote blue in the instance there is only one macro it would be recommended to make said initial if, with all subsequent being non-macro types.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_CA","sentence":"^\\QThe pre-compiler will put a reference to that section in the codebase in order to return after allocation and skip over the if clauses until it exits, copying between the end of the if clause and the first then clauseCompilerErrorNote red Requires a second then with the equivalent MACRO name, otherwise if there is no macro thereby fulfilling that clause it will throw a pre-compiler error due to no existing then closing case.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_CA","sentence":"^\\QThe pre-compiler will then allocate the “in-between” area to a buffer labelled either BETWEEN or INTERCASEBetweenAndInterCaseNote blue We will use the term BETWEEN for the purposes of this document, to not become too verbose…, appending the data inside the previous macro.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_CA","sentence":"^\\QFor NONMACRO cases the pre-compiler will only get the initial if case assigning it to a NONMACRO bufferNMacroAMacroBufferReuseNote red this one can be reused between all NONMACRO cases, as with MACRO, appending the BETWEEN code to it then adding that NONMACRO buffer to the FINAL buffer.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_CA","sentence":"^\\QThe benefit of this is that to the developer the top option only has the middle code written once, and without the need of any functions which could offload the functionalityHelperFuncNote blue Although helper functions in the case where they are truly non-fundamental & “off-loadable” are fine.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_CA","sentence":"^\\QThe only meaningful difference is that they are private to the parent function, defined similar to a case definition, and will always be destroyed upon exiting the scopeSFunctionDestructionNote red This includes forbidding that function from being passed out of scope, this can be justified due to that use-case necessitating the creation of a public function already defined of scope NOT a sub-function within THIS scope…\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_CA","sentence":"^\\QA demonstration (using the if case from above), through sub-functioning is as followsSFunctionCompilerNote blue interestingly enough this “should” compile exactly like the above example with the sub-function acting as an alias for the compiler to swap the logic with, the exception being that shared then branches will ALSO need sub-functions that can be input into those localities, which removes the nesting seen in the above pre-compilation solution:\\E$"}
